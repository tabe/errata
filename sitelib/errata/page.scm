(library (errata page)
  (export roman-numeral?
          page<?)
  (import (rnrs))

  (define (get-roman-numeral port)

    (define (roman-digit->number c)
      (cond ((char-ci=? #\i c) 1)
            ((char-ci=? #\v c) 5)
            ((char-ci=? #\x c) 10)
            ((char-ci=? #\l c) 50)
            ((char-ci=? #\c c) 100)
            ((char-ci=? #\d c) 500)
            ((char-ci=? #\m c) 1000)
            (else #f)))

    (define (subtractive x y)
      (cond ((= (* x 5) y) (- y x))
            ((= (* x 10) y) (- y x))
            (else #f)))

    (let ((c (get-char port))
          (d (lookahead-char port)))
      (cond ((eof-object? c) c)
            ((roman-digit->number c)
             => (lambda (x)
                  (cond ((eof-object? d) x)
                        ((roman-digit->number d)
                         => (lambda (y)
                              (cond ((subtractive x y)
                                     => (lambda (s) (get-char port) s))
                                    (else x))))
                        (else x))))
            (else #f))))

  (define (roman-numeral? s)
    (call-with-port (open-string-input-port s)
      (lambda (port)
        (let loop ((m 1000)
                   (sum 0))
          (cond ((get-roman-numeral port)
                 => (lambda (n)
                      (cond ((eof-object? n)
                             (and (< 0 sum) sum))
                            ((<= n m)
                             (loop n (+ sum n)))
                            (else #f))))
                (else #f))))))

  (define (page<? s0 s1)
    (assert (string? s0))
    (assert (string? s1))
    (cond ((string->number s0)
           => (lambda (n0)
                (cond ((string->number s1)
                       => (lambda (n1) (< n0 n1)))
                      (else #f))))
          ((roman-numeral? s0)
           => (lambda (n0)
                (cond ((roman-numeral? s1)
                       => (lambda (n1) (< n0 n1)))
                      (else #t))))
          (else
           (string<? s0 s1))))

)
